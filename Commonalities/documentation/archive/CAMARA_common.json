{
  "info": {
    "description": "Common data and errors for CAMARA APIs",
    "version": "0.3.0",
    "title": "Common data and errors for CAMARA APIs"
  },
  "components": {
    "schemas": {
      "TimePeriod": {
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "An instant of time, starting of the TimePeriod"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "An instant of time, ending of the TimePeriod. If not included, then the period has no ending date"
          }
        },
        "required": [
          "startDate"
        ]
      },
      "ErrorInfo": {
        "type": "object",
        "required": [
          "message",
          "status",
          "code"
        ],
        "properties": {
          "message": {
            "type": "string",
            "description": "A human readable description of what the event represent"
          },
          "status": {
            "type": "integer",
            "description": "HTTP response status code"
          },
          "code": {
            "type": "string",
            "description": "Friendly Code to describe the error"
          }
        }
      }
    }
  },
  "responses": {
    "InvalidArgument": {
      "description": "Invalid Argument",
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "example": {
            "status": 400,
            "code": "INVALID_INPUT",
            "message": "Schema validation failed at  ..."
          }
        }
      }
    },
    "Conflict": {
      "description": "conflict",
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "example": {
            "status": 409,
            "code": "CONFLICT",
            "message": "Schema validation failed at  ..."
          }
        }
      }
    },
    "FailedPrecondition": {
      "description": "Failed precondition",
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "example": {
            "status": 400,
            "code": "FAILED_PRECONDITION",
            "message": "Schema validation failed at  ..."
          }
        }
      }
    },
    "OutOfRange": {
      "description": "Out of Range",
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "example": {
            "status": 400,
            "code": "OUT_OF_RANGE",
            "message": "Schema validation failed at  ..."
          }
        }
      }
    },
    "Unauthenticated": {
      "description": "Not Authenticated",
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "example": {
            "status": 401,
            "code": "UNAUTHENTICATED",
            "message": "Request not authenticated due to missing, invalid, or expired"
          }
        }
      }
    },
    "PermissionDenied": {
      "description": "Permission denied",
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "example": {
            "status": 403,
            "code": "PERMISSION_DENIED",
            "message": "Client does not have sufficient permissions to perform"
          }
        }
      }
    },
    "NotFound": {
      "description": "Not Found",
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "example": {
            "status": 404,
            "code": "NOT_FOUND",
            "message": "The specified resource is not found"
          }
        }
      }
    },
    "Aborted": {
      "description": "Aborted",
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "example": {
            "status": 409,
            "code": "ABORTED",
            "message": "Concurrency conflict."
          }
        }
      }
    },
    "AlreadyExists": {
      "description": "Already Exists",
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "example": {
            "status": 409,
            "code": "ALREADY_EXISTS",
            "message": "The resource that a client tried to create already exists."
          }
        }
      }
    },
    "TooManyRequests": {
      "description": "Already Exists",
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "example": {
            "status": 429,
            "code": "TOO_MANY_REQUESTS",
            "message": "Either out of resource quota or reaching rate limiting."
          }
        }
      }
    },
    "Internal": {
      "description": "Internal Error",
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "example": {
            "status": 500,
            "code": "INTERNAL",
            "message": "Unknown server error.Typically a server bug."
          }
        }
      }
    },
    "BadGateway": {
      "description": "Bad Gateway",
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "example": {
            "status": 502,
            "code": "BAD_GATEWAY",
            "message": "Couldn't reach an upstream internal service."
          }
        }
      }
    },
    "Unavailable": {
      "description": "Service Unavailable",
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "example": {
            "status": 504,
            "code": "UNAVAILABLE",
            "message": "Request timeout exceeded"
          }
        }
      }
    },
    "Timeout": {
      "description": "Timeout",
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "example": {
            "status": 503,
            "code": "TIMEOUT",
            "message": "Request timeout exceeded"
          }
        }
      }
    },
    "NotImplemented": {
      "description": "Not Implemented",
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "example": {
            "status": 501,
            "code": "NOT_IMPLEMENTED",
            "message": "This functionality is not implemented yet"
          }
        }
      }
    },
    "AuthenticationRequired": {
      "description": "Authentication Required",
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "example": {
            "status": 401,
            "code": "AUTHENTICATION_REQUIRED",
            "message": "New authentication is required"
          }
        }
      }
    },
    "NotFoundAndOutOfRange": {
      "description": "Out Of Range and Not Found",
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "example": [
            {
              "status": 404,
              "code": "OUT_OF_RANGE",
              "message": "Out Of Range"
            },
            {
              "status": 404,
              "code": "NOT_FOUND",
              "message": "Not found"
            }
          ]
        }
      }
    },
    "MethodNotAllowed": {
      "description": "Method not allowed",
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "example": {
            "status": 405,
            "code": "METHOD_NOT_ALLOWED",
            "message": "The requested method is not allowed/supported on the target"
          }
        }
      }
    },
    "NotAcceptable": {
      "description": "Not Acceptable",
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "example": {
            "status": 406,
            "code": "NOT_ACCEPTABLE",
            "message": "The server can't produce a response matching the content requested by the client through Accept-* headers"
          }
        }
      }
    },
    "UnsupportedMediaType": {
      "description": "Unsupported Media Type",
      "content": {
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/ErrorInfo"
          },
          "example": {
            "status": 415,
            "code": "UNSUPPORTED_MEDIA_TYPE",
            "message": "The server refuses to accept the request because the payload format is in an unsupported format."
          }
        }
      }
    }
  }
}
